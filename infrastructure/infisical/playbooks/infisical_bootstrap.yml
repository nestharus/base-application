---
- name: Bootstrap Infisical Configuration
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    infisical_cli_path: "/usr/local/bin/infisical"
    infisical_api_url: "http://infisical.infisical.svc.cluster.local:8080/api"
  tasks:
    - name: "Wait for Infisical API to be available"
      uri:
        url: "{{ infisical_api_url }}/status"
        method: GET
      register: result
      until: result.status == 200
      retries: 30
      delay: 10
      
    - name: "Attempt to log in using admin credentials"
      shell: |
        set -e
        {{ infisical_cli_path }} login --method=universal-auth \
          --client-id={{ lookup('env', 'INFISICAL_INITIAL_ADMIN_CLIENT_ID') }} \
          --client-secret={{ lookup('env', 'INFISICAL_INITIAL_ADMIN_CLIENT_SECRET') }} \
          --api-url={{ infisical_api_url }}
      register: login_result
      changed_when: true

    - name: "Get default Project ID"
      shell: "{{ infisical_cli_path }} projects list -n 1 --output-format json | python3 -c 'import sys, json; print(json.load(sys.stdin)[0][\"ID\"])'"
      register: project_id_result
      changed_when: false

    - name: "Set project context"
      shell: "{{ infisical_cli_path }} init --project-id={{ project_id_result.stdout }} --api-url={{ infisical_api_url }}"
      changed_when: false

    - name: "Create Service Token for services"
      shell: >
        {{ infisical_cli_path }} service-token create 
        --name="st-{{ item }}" 
        --environment="dev" 
        --permissions='[{"environment": "dev", "permission": "read"}]'
        --output-format="json"
      register: service_tokens
      changed_when: true
      loop:
        - user-service
        - billing-service
        - auth-service
        - notification-service

    - name: "Store service tokens in Kubernetes secrets"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item.item }}-infisical-token"
            namespace: "{{ item.item }}"
          type: Opaque
          stringData:
            token: "{{ (item.stdout | from_json).serviceToken }}"
      loop: "{{ service_tokens.results }}"
      when: item.changed

    - name: "Configuration complete! Display summary."
      debug:
        msg:
          - "Infisical has been configured successfully"
          - "Service tokens have been created and stored in respective namespaces"