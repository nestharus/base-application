apiVersion: v1
kind: ConfigMap
metadata:
  name: service-token-operator-config
  namespace: infisical
data:
  config.yaml: |
    # Service token operator configuration
    operator:
      # Namespace selector for services that need tokens
      namespaceSelector:
        matchLabels:
          infisical.io/enabled: "true"
      
      # Default token configuration
      defaultTokenConfig:
        expiry: "90d"
        autoRotate: true
        rotationPeriod: "30d"
    
    # Service discovery patterns
    servicePatterns:
      - pattern: "*-service"
        tokenType: "service-token"
        baseSecretPath: "/services"
      - pattern: "*-worker"
        tokenType: "service-token"
        baseSecretPath: "/workers"
      - pattern: "*-job"
        tokenType: "service-token"
        baseSecretPath: "/jobs"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infisical-service-token-operator
  namespace: infisical
spec:
  replicas: 1
  selector:
    matchLabels:
      app: infisical-service-token-operator
  template:
    metadata:
      labels:
        app: infisical-service-token-operator
    spec:
      serviceAccountName: infisical-service-token-operator
      nodeSelector:
        node-type: general-restricted
      containers:
      - name: operator
        image: infisical/operator:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # Service token operator logic
            while true; do
              echo "Scanning for services requiring tokens..."
              
              # Get all namespaces with infisical enabled
              for ns in $(kubectl get ns -l infisical.io/enabled=true -o jsonpath='{.items[*].metadata.name}'); do
                echo "Processing namespace: $ns"
                
                # Get environment from namespace annotation
                ENV=$(kubectl get ns $ns -o jsonpath='{.metadata.annotations.infisical\.io/environment}')
                if [ -z "$ENV" ]; then
                  ENV="dev"  # Default to dev if not specified
                fi
                
                # Get all deployments in namespace
                for deployment in $(kubectl get deployments -n $ns -o jsonpath='{.items[*].metadata.name}'); do
                  # Check if deployment has infisical annotation
                  if kubectl get deployment $deployment -n $ns -o jsonpath='{.metadata.annotations.infisical\.io/inject-token}' | grep -q "true"; then
                    echo "Processing deployment: $deployment in namespace: $ns"
                    
                    # Get service-specific configuration
                    SERVICE_NAME=$deployment
                    SECRET_PATH=$(kubectl get deployment $deployment -n $ns -o jsonpath='{.metadata.annotations.infisical\.io/secret-path}')
                    if [ -z "$SECRET_PATH" ]; then
                      SECRET_PATH="/services/$SERVICE_NAME"
                    fi
                    
                    # Check if token secret already exists
                    if ! kubectl get secret "${SERVICE_NAME}-infisical-token" -n $ns &> /dev/null; then
                      echo "Creating token for service: $SERVICE_NAME"
                      
                      # Create service token via Infisical API
                      TOKEN=$(infisical tokens create \
                        --name "${ENV}-${ns}-${SERVICE_NAME}" \
                        --scope "${ENV}:${SECRET_PATH}:read" \
                        --scope "${ENV}:/shared:read" \
                        --expiry "90d" | jq -r .token)
                      
                      # Create Kubernetes secret
                      kubectl create secret generic "${SERVICE_NAME}-infisical-token" \
                        -n $ns \
                        --from-literal=token="$TOKEN" \
                        --from-literal=infisical-url="$INFISICAL_URL" \
                        --from-literal=environment="$ENV" \
                        --from-literal=project-id="$PROJECT_ID"
                      
                      # Label secret for tracking
                      kubectl label secret "${SERVICE_NAME}-infisical-token" -n $ns \
                        infisical.io/managed="true" \
                        infisical.io/service="$SERVICE_NAME" \
                        infisical.io/token-type="service-token"
                    fi
                    
                    # Ensure deployment references the token
                    kubectl patch deployment $deployment -n $ns --type=json -p='[
                      {
                        "op": "add",
                        "path": "/spec/template/spec/containers/0/env/-",
                        "value": {
                          "name": "INFISICAL_TOKEN",
                          "valueFrom": {
                            "secretKeyRef": {
                              "name": "'${SERVICE_NAME}'-infisical-token",
                              "key": "token"
                            }
                          }
                        }
                      }
                    ]' 2>/dev/null || true
                  fi
                done
              done
              
              echo "Token scan complete. Sleeping for 300 seconds..."
              sleep 300
            done
        env:
        - name: INFISICAL_URL
          value: "http://infisical.infisical.svc.cluster.local:8080"
        - name: INFISICAL_TOKEN
          valueFrom:
            secretKeyRef:
              name: infisical-operator-token
              key: token
        - name: PROJECT_ID
          value: "default"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: config
          mountPath: /config
        - name: token-scopes
          mountPath: /token-scopes
      volumes:
      - name: config
        configMap:
          name: service-token-operator-config
      - name: token-scopes
        configMap:
          name: machine-token-scopes
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: infisical-service-token-operator
  namespace: infisical
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: infisical-service-token-operator
rules:
- apiGroups: [""]
  resources: ["namespaces", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: infisical-service-token-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: infisical-service-token-operator
subjects:
- kind: ServiceAccount
  name: infisical-service-token-operator
  namespace: infisical