apiVersion: v1
kind: ConfigMap
metadata:
  name: machine-token-scopes
  namespace: infisical
data:
  # Machine token types and their scopes
  token-scopes.yaml: |
    # Machine token types define the access patterns for different use cases
    tokenTypes:
      # Platform-level token for Flux in platform cluster
      platform-flux:
        description: "Machine token for platform Flux controller"
        scopes:
          - project: "*"
            environment: ["platform"]
            secrets:
              - path: "/"
                permissions: ["read", "write"]
          - project: "cluster-tokens"
            environment: ["*"]
            secrets:
              - path: "/"
                permissions: ["read", "write", "create"]
      
      # Environment-level token for Flux in application clusters
      environment-flux:
        description: "Machine token for environment-specific Flux controller"
        scopes:
          - project: "${ENVIRONMENT}"
            environment: ["${ENVIRONMENT}"]
            secrets:
              - path: "/"
                permissions: ["read"]
              - path: "/services/*/tokens"
                permissions: ["create", "read"]
      
      # Service-level tokens
      service-token:
        description: "Machine token for individual services"
        scopes:
          - project: "${ENVIRONMENT}"
            environment: ["${ENVIRONMENT}"]
            secrets:
              - path: "/services/${SERVICE_NAME}"
                permissions: ["read"]
              - path: "/shared"
                permissions: ["read"]
    
    # Service to token type mappings
    serviceTokenMappings:
      # Core services
      user-service:
        tokenType: service-token
        additionalScopes:
          - path: "/database/user-service"
            permissions: ["read"]
      
      # Infrastructure services
      kong:
        tokenType: service-token
        additionalScopes:
          - path: "/infrastructure/kong"
            permissions: ["read"]
          - path: "/certificates"
            permissions: ["read"]
      
      jfrog-artifactory:
        tokenType: service-token
        additionalScopes:
          - path: "/infrastructure/artifactory"
            permissions: ["read"]
      
      # Default mapping for services not explicitly listed
      default:
        tokenType: service-token
        additionalScopes: []
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: infisical-token-generator
  namespace: infisical
data:
  generate-token.sh: |
    #!/bin/bash
    set -e
    
    # Function to generate machine token with specific scopes
    generate_machine_token() {
      local token_name=$1
      local token_type=$2
      local environment=$3
      local service_name=$4
      
      echo "Generating machine token: $token_name (type: $token_type)"
      
      # Get token configuration
      TOKEN_CONFIG=$(yq eval ".tokenTypes.${token_type}" /config/token-scopes.yaml)
      
      # Replace variables in scopes
      TOKEN_CONFIG=$(echo "$TOKEN_CONFIG" | sed "s/\${ENVIRONMENT}/$environment/g" | sed "s/\${SERVICE_NAME}/$service_name/g")
      
      # Call Infisical API to create machine token
      # This would be replaced with actual Infisical API calls
      infisical machine-tokens create \
        --name "$token_name" \
        --scopes "$TOKEN_CONFIG" \
        --expiry "365d"
    }
    
    # Main execution
    case "$1" in
      "platform-flux")
        generate_machine_token "platform-flux-token" "platform-flux" "platform" ""
        ;;
      "environment-flux")
        generate_machine_token "$2-flux-token" "environment-flux" "$2" ""
        ;;
      "service")
        generate_machine_token "$2-$3-token" "service-token" "$2" "$3"
        ;;
      *)
        echo "Usage: $0 {platform-flux|environment-flux <env>|service <env> <service-name>}"
        exit 1
        ;;
    esac