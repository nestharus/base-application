apiVersion: batch/v1
kind: CronJob
metadata:
  name: infisical-token-provisioner
  namespace: infisical
spec:
  schedule: "0 */6 * * *"  # Run every 6 hours
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: infisical-token-provisioner
        spec:
          serviceAccountName: infisical-token-provisioner
          nodeSelector:
            cluster-type: platform
          containers:
          - name: token-provisioner
            image: infisical/cli:latest
            command: ["/bin/bash"]
            args:
              - -c
              - |
                set -e
                
                # Wait for Infisical to be ready
                until curl -s http://infisical:8080/api/status > /dev/null; do
                  echo "Waiting for Infisical to be ready..."
                  sleep 5
                done
                
                # Login with service token
                infisical login --domain http://infisical:8080 --token "$INFISICAL_PLATFORM_TOKEN"
                
                # Generate platform flux token if it doesn't exist
                if ! kubectl get secret platform-flux-token -n platform-flux-system &> /dev/null; then
                  echo "Generating platform flux token..."
                  TOKEN=$(infisical tokens create \
                    --name "platform-flux-token" \
                    --type "platform-flux" \
                    --scope "platform:*" \
                    --expiry "365d" | jq -r .token)
                  
                  kubectl create secret generic platform-flux-token \
                    -n platform-flux-system \
                    --from-literal=token="$TOKEN" \
                    --dry-run=client -o yaml | kubectl apply -f -
                fi
                
                # For each deployed cluster
                for cluster in $(kubectl get kubernetesclusters -n flux-system -o jsonpath='{.items[*].metadata.name}'); do
                  # Get environment name and type from cluster
                  ENV_NAME=$(kubectl get kubernetescluster $cluster -n flux-system -o jsonpath='{.spec.parameters.environmentName}')
                  ENV_TYPE=$(kubectl get kubernetescluster $cluster -n flux-system -o jsonpath='{.spec.parameters.environmentType}')
                  
                  if [ ! -z "$ENV_NAME" ] && [ ! -z "$ENV_TYPE" ]; then
                    echo "Processing environment: $ENV_NAME (type: $ENV_TYPE)"
                    
                    # Generate environment flux token
                    ENV_TOKEN=$(infisical tokens create \
                      --name "$ENV_NAME-flux-token" \
                      --type "environment-flux" \
                      --scope "$ENV_TYPE:read" \
                      --expiry "90d" | jq -r .token)
                    
                    # Store in platform cluster for propagation
                    kubectl create secret generic "$ENV_NAME-flux-token" \
                      -n infisical \
                      --from-literal=token="$ENV_TOKEN" \
                      --from-literal=environment="$ENV_NAME" \
                      --from-literal=environment-type="$ENV_TYPE" \
                      --from-literal=infisical-url="http://infisical.infisical.svc.cluster.local:8080" \
                      --dry-run=client -o yaml | kubectl apply -f -
                    
                    # Label for Flux to sync to target cluster
                    kubectl label secret "$ENV_NAME-flux-token" -n infisical \
                      infisical.io/sync-to-cluster="$ENV_NAME" \
                      infisical.io/target-namespace="flux-system" \
                      --overwrite
                  fi
                done
                
                echo "Token provisioning completed successfully"
            env:
            - name: INFISICAL_PLATFORM_TOKEN
              valueFrom:
                secretKeyRef:
                  name: infisical-platform-token
                  key: token
            volumeMounts:
            - name: token-config
              mountPath: /config
          volumes:
          - name: token-config
            configMap:
              name: machine-token-scopes
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: infisical-token-provisioner
  namespace: infisical
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: infisical-token-provisioner
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["infrastructure.base.io"]
  resources: ["kubernetesclusters"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: infisical-token-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: infisical-token-provisioner
subjects:
- kind: ServiceAccount
  name: infisical-token-provisioner
  namespace: infisical