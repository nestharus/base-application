---
- name: Deploy Crossplane to Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    crossplane_namespace: crossplane-system
    crossplane_version: "1.14.0"
    
  tasks:
    - name: Ensure kubectl is configured
      shell: kubectl cluster-info
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: cluster_info
      failed_when: cluster_info.rc != 0
      
    - name: Create Crossplane namespace
      kubernetes.core.k8s:
        name: "{{ crossplane_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig }}"
        
    - name: Add Crossplane Helm repository
      kubernetes.core.helm_repository:
        name: crossplane-stable
        repo_url: "https://charts.crossplane.io/stable"
        
    - name: Install Crossplane via Helm
      kubernetes.core.helm:
        name: crossplane
        chart_ref: crossplane-stable/crossplane
        release_namespace: "{{ crossplane_namespace }}"
        create_namespace: true
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_timeout: 600
        values:
          replicas: 1
          deploymentStrategy: Recreate
          
          # Resource configuration
          resourcesCrossplane:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
              
          resourcesRBACManager:
            limits:
              cpu: 100m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
              
          # Metrics configuration
          metrics:
            enabled: true
            
          # Node selector for system node pool
          nodeSelector:
            nodepool: system
            
          # Tolerations for system node pool
          tolerations:
          - key: "nodepool"
            operator: "Equal"
            value: "system"
            effect: "NoSchedule"
          - key: "node.kubernetes.io/not-ready"
            operator: "Exists"
            effect: "NoExecute"
            tolerationSeconds: 300
          - key: "node.kubernetes.io/unreachable"
            operator: "Exists"
            effect: "NoExecute"
            tolerationSeconds: 300
            
          # Affinity for system node pool
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: nodepool
                    operator: In
                    values:
                    - system
                    
          # Priority class for critical system components
          priorityClassName: system-cluster-critical
          
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            fsGroup: 65532
            
          podSecurityContext:
            runAsNonRoot: true
            runAsUser: 65532
            fsGroup: 65532
            
    - name: Wait for Crossplane deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: crossplane
        namespace: "{{ crossplane_namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
        wait_timeout: 300
        
    - name: Wait for Crossplane RBAC Manager deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: crossplane-rbac-manager
        namespace: "{{ crossplane_namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
        wait_timeout: 300
        
    - name: Install Crossplane CLI
      shell: |
        if ! command -v kubectl-crossplane &> /dev/null; then
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv kubectl-crossplane /usr/local/bin
        fi
      args:
        creates: /usr/local/bin/kubectl-crossplane
        
    - name: Verify Crossplane installation
      shell: kubectl get pods -n {{ crossplane_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: crossplane_pods
      
    - name: Display Crossplane pods status
      debug:
        msg: "{{ crossplane_pods.stdout_lines }}"
        
    - name: Check Crossplane providers
      shell: kubectl get providers.pkg.crossplane.io
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: providers_check
      ignore_errors: true
      
    - name: Display installed providers
      debug:
        msg: "{{ providers_check.stdout_lines | default(['No providers installed yet']) }}"