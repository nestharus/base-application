---
- name: Deploy Infisical Secret Management Platform
  hosts: localhost
  connection: local
  gather_facts: true
  
  vars:
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    infisical_namespace: infisical
    infisical_version: "0.4.0"
    storage_class: "{{ lookup('env', 'INFISICAL_STORAGE_CLASS') | default('vultr-block-storage-nvme-retain') }}"
    
  tasks:
    - name: Ensure kubectl is configured
      shell: kubectl cluster-info
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: cluster_info
      failed_when: cluster_info.rc != 0
      
    - name: Create Infisical namespace
      kubernetes.core.k8s:
        name: "{{ infisical_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig }}"
        
    - name: Generate secure random credentials
      set_fact:
        postgres_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
        redis_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
        initial_admin_email: "admin@platform.local"
        initial_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=24') }}"
        encryption_key: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
        jwt_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        smtp_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"
      no_log: true
      
    - name: Create Infisical configuration secret
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: infisical-config
            namespace: "{{ infisical_namespace }}"
          type: Opaque
          stringData:
            POSTGRES_PASSWORD: "{{ postgres_password }}"
            REDIS_PASSWORD: "{{ redis_password }}"
            INITIAL_ADMIN_EMAIL: "{{ initial_admin_email }}"
            INITIAL_ADMIN_PASSWORD: "{{ initial_admin_password }}"
            ENCRYPTION_KEY: "{{ encryption_key }}"
            JWT_SECRET: "{{ jwt_secret }}"
            SMTP_PASSWORD: "{{ smtp_password }}"
      no_log: true
      
    - name: Add Infisical Helm repository
      kubernetes.core.helm_repository:
        name: infisical
        repo_url: "https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/"
        
    - name: Deploy Infisical via Helm
      kubernetes.core.helm:
        name: infisical
        chart_ref: infisical/infisical-standalone
        release_namespace: "{{ infisical_namespace }}"
        create_namespace: true
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_timeout: 600
        values:
          # Platform cluster configuration
          nodeSelector:
            nodepool: system
          priorityClassName: system-cluster-critical
          
          infisical:
            # Admin credentials configuration
            admin:
              initialCredentials:
                email: "{{ initial_admin_email }}"
                password: "{{ initial_admin_password }}"
                secretName: "infisical-initial-creds"
            
            # Environment variables from secret
            envFrom:
              - secretRef:
                  name: infisical-config
            
            # Encryption and JWT configuration
            encryptionKey: "{{ encryption_key }}"
            jwtSecret: "{{ jwt_secret }}"
            
            # Resource configuration
            resources:
              requests:
                cpu: "500m"
                memory: "1Gi"
              limits:
                cpu: "2"
                memory: "2Gi"
            
            # Persistence
            persistence:
              enabled: true
              size: 50Gi
              storageClass: "{{ storage_class }}"
          
          # PostgreSQL configuration
          postgresql:
            enabled: true
            auth:
              postgresPassword: "{{ postgres_password }}"
              database: infisical
            primary:
              nodeSelector:
                nodepool: system
              persistence:
                enabled: true
                size: 20Gi
                storageClass: "{{ storage_class }}"
              resources:
                requests:
                  cpu: "250m"
                  memory: "512Mi"
                limits:
                  cpu: "1"
                  memory: "1Gi"
          
          # Redis configuration
          redis:
            enabled: true
            auth:
              enabled: true
              password: "{{ redis_password }}"
            master:
              nodeSelector:
                nodepool: system
              persistence:
                enabled: true
                size: 10Gi
                storageClass: "{{ storage_class }}"
              resources:
                requests:
                  cpu: "100m"
                  memory: "256Mi"
                limits:
                  cpu: "500m"
                  memory: "512Mi"
          
          # Service configuration
          service:
            type: ClusterIP
            port: 8080
          
          # Tolerations for system node pool
          tolerations:
          - key: "nodepool"
            operator: "Equal"
            value: "system"
            effect: "NoSchedule"
          - key: "node.kubernetes.io/not-ready"
            operator: "Exists"
            effect: "NoExecute"
            tolerationSeconds: 300
          - key: "node.kubernetes.io/unreachable"
            operator: "Exists"
            effect: "NoExecute"
            tolerationSeconds: 300
          
          # Ingress can be enabled if needed
          ingress:
            enabled: false
      no_log: false  # Set to true in production to hide sensitive values
      
    - name: Wait for Infisical deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: infisical
        namespace: "{{ infisical_namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
        
    - name: Wait for PostgreSQL to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: infisical-postgresql
        namespace: "{{ infisical_namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        
    - name: Wait for Redis to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: infisical-redis-master
        namespace: "{{ infisical_namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        
    - name: Wait for Infisical API to be available
      uri:
        url: "http://localhost:8080/api/status"
        method: GET
      register: api_status
      until: api_status.status == 200
      retries: 30
      delay: 10
      delegate_to: "{{ groups['k8s_master'][0] | default('localhost') }}"
      when: false  # Disabled for now, enable if running on master node
      
    - name: Create port-forward for initial configuration
      shell: |
        kubectl port-forward -n {{ infisical_namespace }} svc/infisical 8080:8080 &
        echo $! > /tmp/infisical-port-forward.pid
        sleep 5
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: port_forward
      
    - name: Initialize Infisical with admin account
      uri:
        url: "http://localhost:8080/api/v1/auth/signup"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          email: "{{ initial_admin_email }}"
          password: "{{ initial_admin_password }}"
          firstName: "Platform"
          lastName: "Admin"
      register: admin_signup
      ignore_errors: true
      retries: 3
      delay: 5
      
    - name: Login as admin to get auth token
      uri:
        url: "http://localhost:8080/api/v1/auth/login"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          email: "{{ initial_admin_email }}"
          password: "{{ initial_admin_password }}"
      register: admin_login
      when: admin_signup is succeeded or admin_signup.status == 409  # 409 = already exists
      
    - name: Create default project/workspace
      uri:
        url: "http://localhost:8080/api/v2/workspace"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_login.json.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "Platform"
          description: "Platform infrastructure secrets"
      register: workspace_creation
      when: admin_login is succeeded
      ignore_errors: true
      
    - name: Create Kubernetes auth identity for platform services
      uri:
        url: "http://localhost:8080/api/v1/auth/kubernetes/identities"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_login.json.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "platform-services"
          role: "platform-admin"
          kubernetesAuth:
            boundServiceAccountNames: ["*-sa"]
            boundNamespaces: ["flux-system", "infisical", "minio", "crossplane-system"]
            reviewerJwtMethod: "client-jwt"  # Use client JWT - no long-lived tokens
            accessTokenTTL: "7d"  # 7-day token TTL
            accessTokenMaxTTL: "180d"  # 180-day max renewal
            accessTokenNumUsesLimit: 0  # Unlimited uses
      register: platform_identity
      when: admin_login is succeeded
      
    - name: Store platform identity configuration for services
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: infisical-platform-config
            namespace: "{{ infisical_namespace }}"
          data:
            identity_id: "{{ platform_identity.json.identity.id | default('') }}"
            workspace_id: "{{ workspace_creation.json.workspace.id | default('default') }}"
            api_url: "http://infisical.{{ infisical_namespace }}.svc.cluster.local:8080/api"
            auth_method: "kubernetes"
            token_ttl: "7d"
            token_max_ttl: "180d"
      when: platform_identity is succeeded
      
    - name: Create environments in Infisical
      uri:
        url: "http://localhost:8080/api/v1/workspace/{{ workspace_creation.json.workspace.id | default('default') }}/environments"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_login.json.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ item }}"
          slug: "{{ item }}"
      loop:
        - dev
        - staging
        - production
      when: admin_login is succeeded
      ignore_errors: true
      
    - name: Configure secret rotation policies
      uri:
        url: "http://localhost:8080/api/v1/workspace/{{ workspace_creation.json.workspace.id | default('default') }}/rotation-policy"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_login.json.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "default-rotation"
          rotationInterval: 2592000  # 30 days in seconds
          notificationLeadTime: 604800  # 7 days before rotation
          environments: ["production"]
          secretPaths: ["/"]
          autoRotate: true  # AUTO rotation enabled!
      when: admin_login is succeeded
      ignore_errors: true
      
    - name: Stop port-forward
      shell: |
        if [ -f /tmp/infisical-port-forward.pid ]; then
          kill $(cat /tmp/infisical-port-forward.pid) || true
          rm /tmp/infisical-port-forward.pid
        fi
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      
    - name: Deploy Kubernetes auth manager for Infisical
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: infisical-k8s-auth-manager
            namespace: "{{ infisical_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: infisical-k8s-auth-manager
            template:
              metadata:
                labels:
                  app: infisical-k8s-auth-manager
              spec:
                serviceAccountName: infisical-k8s-auth-manager
                containers:
                - name: manager
                  image: infisical/kubernetes-operator:latest
                  command:
                  - /manager
                  args:
                  - --auth-method=kubernetes
                  - --enable-auto-renewal
                  - --renewal-threshold=0.8
                  env:
                  - name: INFISICAL_API_URL
                    value: "http://infisical.{{ infisical_namespace }}.svc.cluster.local:8080/api"
                  - name: INFISICAL_AUTH_METHOD
                    value: "kubernetes"
                  - name: KUBERNETES_SERVICE_ACCOUNT_TOKEN
                    value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
                  - name: WATCH_NAMESPACE
                    value: ""  # Watch all namespaces
                  - name: TOKEN_RENEWAL_ENABLED
                    value: "true"
                  - name: TOKEN_RENEWAL_THRESHOLD
                    value: "0.8"  # Renew at 80% of TTL
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
                    limits:
                      cpu: "500m"
                      memory: "256Mi"
                nodeSelector:
                  nodepool: system
                tolerations:
                - key: "nodepool"
                  operator: "Equal"
                  value: "system"
                  effect: "NoSchedule"
                  
    - name: Create ServiceAccount for Kubernetes auth manager
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: infisical-k8s-auth-manager
            namespace: "{{ infisical_namespace }}"
            
    - name: Create ClusterRole for Kubernetes auth manager
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: infisical-k8s-auth-manager
          rules:
          - apiGroups: [""]
            resources: ["serviceaccounts"]
            verbs: ["get", "list", "create", "update", "patch"]
          - apiGroups: [""]
            resources: ["secrets", "configmaps"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          - apiGroups: [""]
            resources: ["namespaces"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["deployments", "statefulsets", "daemonsets"]
            verbs: ["get", "list", "watch", "update", "patch"]
          - apiGroups: ["rbac.authorization.k8s.io"]
            resources: ["clusterrolebindings", "rolebindings"]
            verbs: ["get", "list", "create", "update", "patch"]
          - apiGroups: ["authentication.k8s.io"]
            resources: ["tokenreviews"]
            verbs: ["create"]
            
    - name: Create ClusterRoleBinding for Kubernetes auth manager
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: infisical-k8s-auth-manager
          subjects:
          - kind: ServiceAccount
            name: infisical-k8s-auth-manager
            namespace: "{{ infisical_namespace }}"
          roleRef:
            kind: ClusterRole
            name: infisical-k8s-auth-manager
            apiGroup: rbac.authorization.k8s.io
            
    # Kubernetes auth configuration is now integrated directly in the playbook above
            
    - name: Save initial credentials to local file (for backup)
      copy:
        content: |
          Infisical Initial Credentials
          ==============================
          Generated: {{ ansible_date_time.iso8601 }}
          
          Admin Email: {{ initial_admin_email }}
          Admin Password: {{ initial_admin_password }}
          
          PostgreSQL Password: {{ postgres_password }}
          Redis Password: {{ redis_password }}
          
          Encryption Key: {{ encryption_key }}
          JWT Secret: {{ jwt_secret }}
          
          Workspace ID: {{ workspace_creation.json.workspace.id | default('default') }}
          
          API URL: http://infisical.{{ infisical_namespace }}.svc.cluster.local:8080/api
          
          IMPORTANT: Store these credentials securely and delete this file after saving them.
        dest: "/tmp/infisical-credentials-{{ ansible_date_time.epoch }}.txt"
        mode: '0600'
      delegate_to: localhost
      no_log: true
      
    - name: Display setup summary
      debug:
        msg:
          - "Infisical has been successfully deployed!"
          - "Namespace: {{ infisical_namespace }}"
          - "API Endpoint: http://infisical.{{ infisical_namespace }}.svc.cluster.local:8080/api"
          - "Initial credentials saved to: /tmp/infisical-credentials-{{ ansible_date_time.epoch }}.txt"
          - "Kubernetes auth configured - no long-lived tokens"
          - "Token TTL: 7 days with auto-renewal at 80%"
          - "Auth manager deployed for automatic identity management"
          
    # Bootstrap is now integrated directly in this playbook